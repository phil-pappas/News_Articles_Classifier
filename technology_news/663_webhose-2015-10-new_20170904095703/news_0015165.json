{"organizations": ["Zero Change Inputs"], "uuid": "50fe6f41a19f7e191eccc513c6d21b24640e6040", "thread": {"social": {"gplus": {"shares": 0}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 0}, "facebook": {"likes": 0, "shares": 0, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "ezinearticles.com", "main_image": "//ezinearticles.com/members/mem_pics/Marc-Warne_520341.jpg", "site_section": "http://feeds.ezinearticles.com/category/Computers-and-Technology:Software.xml", "section_title": "Computers and Technology:Software Articles from EzineArticles.com", "url": "http://EzineArticles.com/?Bitcoin-Transaction-Malleability,-Zero-Change-Inputs-and-How-It-Affects-Bitcoin-Exchanges&id=9195329", "country": "US", "title": "Bitcoin Transaction Malleability, Zero Change Inputs and How It Affects Bitcoin Exchanges", "performance_score": 0, "site": "ezinearticles.com", "participants_count": 0, "title_full": "Bitcoin Transaction Malleability, Zero Change Inputs and How It Affects Bitcoin Exchanges", "spam_score": 0.0, "site_type": "news", "published": "2015-10-20T19:18:00.000+03:00", "replies_count": 0, "uuid": "50fe6f41a19f7e191eccc513c6d21b24640e6040"}, "author": "", "url": "http://EzineArticles.com/?Bitcoin-Transaction-Malleability,-Zero-Change-Inputs-and-How-It-Affects-Bitcoin-Exchanges&id=9195329", "ord_in_thread": 0, "title": "Bitcoin Transaction Malleability, Zero Change Inputs and How It Affects Bitcoin Exchanges", "locations": [], "entities": {"persons": [], "locations": [], "organizations": []}, "highlightText": "", "language": "english", "persons": ["Marc Warne"], "text": "Bitcoin Transaction Malleability, Zero Change Inputs and How It Affects Bitcoin Exchanges By Marc Warne   12, 2015 \nTransaction malleability is once again affecting the entire Bitcoin network. Generally, this causes a lot of confusion more than anything else, and results in seemingly duplicate transactions until the next block is mined. This can be seen as the following: \nYour original transaction never confirming. Another transaction, with the same amount of coins going to and from the same addresses, appearing. This has a different transaction ID. \nOften, this different transaction ID will confirm, and in certain block explorers, you will see warnings about the original transaction being a double spend or otherwise being invalid. \nUltimately though, just one transaction, with the correct amount of Bitcoins being sent, should confirm. If no transactions confirm, or more than one confirm, then this probably isn't directly linked to transaction malleability. \nHowever, it was noticed that there were some transactions sent that have not been mutated, and also are failing to confirm. This is because they rely on a previous input that also won't confirm. \nEssentially, Bitcoin transactions involve spending inputs (which can be thought of as Bitcoins \"inside\" a Bitcoin address) and then getting some change back. For instance, if I had a single input of 10 BTC and wanted to send 1 BTC to someone, I would create a transaction as follows: \n10 BTC -> 1 BTC (to the user) and 9 BTC (back to myself) \nThis way, there is a sort of chain that can be created for all Bitcoins from the initial mining transaction. \nWhen Bitcoin core does a transaction like this, it trusts that it will get the 9 BTC change back, and it will because it generated this transaction itself, or at the very least, the whole transaction won't confirm but nothing is lost. It can immediately send on this 9 BTC in a further transaction without waiting on this being confirmed because it knows where the coins are going to and it knows the transaction information in the network. \nHowever, this assumption is wrong. \nIf the transaction is mutated, Bitcoin core may end up trying to create a new transaction using the 9 BTC change, but based on wrong input information. This is because the actual transaction ID and related data has changed in the blockchain. \nHence, Bitcoin core should never trust itself in this instance, and should always wait on a confirmation for change before sending on this change. \nBitcoin exchanges can configure their primary Bitcoin node to no longer allow change, with zero confirmations, to be included in any Bitcoin transaction. This may be configured by running bitcoind with the -spendzeroconfchange=0 option. \nThis is not enough though, and this can result in a situation where transactions cannot be sent because there are not enough inputs available with at least one confirmation to send a new transaction. Thus, we also run a process which does the following: \nChecks available, unspent but confirmed inputs by calling bitcoin-cli listunspent 1. If there are less than x inputs (currently twelve) then do the following: Work out what input is for around 10 BTC. Work out how to split this into as many 1 BTC transactions as possible, leaving enough space for a fee on top. Call bitcoin-cli sendmany to send that ~10 BTC input to around 10 output addresses, all owned by the Bitcoin marketplace. \nThis way, we can convert one 10 BTC input into approximately ten 1 BTC inputs, which can be used for further transactions. We do this when we are \"running low\" on inputs and there twelve of less remaining. \nThese steps ensure that we will only ever send transactions with fully confirmed inputs. \nOne issue remains though - before we implemented this change, some transactions got sent that rely on mutated change and will never be confirmed. \nAt present, we are researching the best way to resend these transactions. We will probably zap the transactions at an off-peak time, although we want to itemise all the transactions we think should be zapped beforehand, which will take some time. \nOne simple technique to decrease the chances of malleability being an issue is to have your Bitcoin node to connect to as many other nodes as possible. That way, you will be \"shouting\" your new transaction out and getting it popular very quickly, which will likely mean that any mutated transaction will get drowned out and rejected first. \nThere are some nodes out there that have anti-mutation code in already. These are able to detect mutated transactions and only pass on the validated transaction. It is useful to connect to trusted nodes like this, and worth considering implementing this (which will come with its own risks of course). \nAll of these malleability issues will not be a problem once the BIP 62 enhancement to Bitcoin is implemented, which will make malleability impossible. This unfortunately is some way off and there is no reference implementation at present, let alone a plan for migration to a new block type. \nAlthough only brief thought has been given, it may be possible for future versions of Bitcoin software to detect themselves when malleability has occurred on change inputs, and then do one of the following: \nMark this transaction as rejected and remove it from the wallet, as we know it will never confirm (potentially risky, especially if there is a reorg). Possibly inform the node owner. Attempt to \"repackage\" the transaction, i.e. use the same from and to address parameters, but with the correct input details from the change transaction as accepted in the block. \nBittylicious is the UK's premier place to buy and sell Bitcoins. It's the most easy to use site, designed for beginners but with all features the seasoned Bitcoin buyer needs. \nMake your first Bitcoin purchase at Bittylicious and get Bitcoins in your wallet in under five minutes.", "external_links": [], "published": "2015-10-20T19:18:00.000+03:00", "crawled": "2015-10-21T10:22:56.892+03:00", "highlightTitle": ""}